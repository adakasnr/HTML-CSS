If we are working with online server we have to turn off the auto save

CSS-Cascading Style Sheets
    it is responsible for styling the web 
    HTML is used to make  structure(HTML is responsible for what elements will be displayed)
    CSS used to make layout and look(CSS is takes care of how elements are displayed)
Syntax of the CSS f

inline CSS- we do css for perticular line
            for this we have to do styling in that perticular line and each and every line
internal CSS-in this we do css for whole page which have same size heddings
          for this we have to do styling in the head
    internal CSS is good but there is an issue, if we navigate to another page which has same content from the link. the same css may not work for that pages b/c of this we need to do css for every page to avoid this and to save time and make coding simpl we do external css         
external CSS-in this we make seprate CSS file, in that file we create standards for  perticular sizes of headings or paragraphs so that in which ever page we need same CSS we create a link(use link element) in head and acces that CSS file.

Out of these 3, inline CSS is more stronger. it can over ride the both internal & external CSS
even if we are doing external CSS, if i want to change colour for single page that can be done by internal CSS for perticular page 

commenting in CSS /* comment line */
Syntax in EXTERNAL CSS
h1 {
    colour:red;
    size:20mm;
}
h2 {
    colour:blue;
    size:22mm;
}

h1&h2-element selectors
{}- Decleration block
colour&size- properties
red&20mm -Value

note point- semicolon(;) is must and should from property to property, otherwise property may not work
elements grouping is where we can combine elements and do css
we select h1&h2 at time and we can apply CSS that is element grouping 

if we want to do css for whole body tag which has multipiple elements in it, we can select that body and we can do CSS 

if we have 6 h2 tags in a page and if we want to do different CSS for 3 pairs of  individual tags, in that position we can create id in css file with # as shown below
#PAIR1{
    colour: red;
}
id spelling should be same in css file as well as in html file otherwise html file won't recognise

Class Selectors
when we have used single tag for multiple times and if we need to apply different colours for perticular lines, then we can create a class in CSS file and we can access that in html file for perticular line
Syntax for class in HTML
    <h6 class="about">Internal CSS</h6>
    <h6 class="info">Internal CSS </h6>
    <h6 class="about">Internal CSS </h6>
    <h6 class="info">Internal CSS </h6>
    <h6 class="info">Internal CSS </h6>
    <h6 class="about">Internal CSS </h6>
Syntax for CSS
.about{
    color: red;
}
.info{
    color: brown;
}

DIV&SPAN- these 2 are for grouping elements
DIV is used when we need to do group block level element
SPAN is used when we need to do CSS for single word or line

we can also create a class and assign it to div

inheritance- when we do CSS in HTML to the parent element, that CSS will also get applied to the child element inhrently until we do separate CSS to the child element

Last Rule- if we do CSS mulple times to the same element, then last CSS done to same last element is considered for the whole element

specificity- if we apply different CSS to same in different ways for example assiging through class 1st and declation block last, even though as per last rule declaration need to be considerd but class CSS only to be considered b/c it is more specific

Universal Selector(*)- if we make declaration block through * then whole page will follow same CSS, but it is least powerfull b/c all process will over ride this

Color Property- is responsible for color of the TEXT
Background Color- is responsible for background
CSS has almost 140 colors
RGB-RED GREEN BLUE (each color values varies from 0-255) Ex- 255,0,0 which means red given as max and reaminig 2 are 0 that is pure red

Red-(255,0,0)
Black-(0,0,0) 
White-(255,255,255)
Green-(0,255,0)

RGBA- red green blue Alpha
RGBA Specifies opacity(the quality of lacking transparency) of the for a colour
Alpha parameter is a number b/w 0.0(fully transperent) to 1.0(not transperent at all)

Pixel
1 pixel= 1 dot

percent value is considered based on the outer and inner values
if we give px value to outer element and if we want the inner value 30%(width&height) to the outer value, then we can mention % in inner value 

1em = 16px (default browser)
1em = base value

relative to screen- if we are changing page size then our content will also change according to it, this can be done by the vh&vw
vh(view height)- height - percent of the screen
vw(view width)- width - percent of the screen
This we usually do for banners

Default browser styles
we can inspect the page in google chrome and do some changes and check how looks in browser, the changes made in browser for inspection are not gone be saved

calculations in CSS
if we add 2 backgrounds in single page that screen % will added like 100vh+200px by default, but we want then as 100 then we use [calc(100vh-20px)] function and do math operations to fit both background colours as 100%

TYPOGRAPHY
font family- describes font of an element
if we assign a font to text there might be possibility browser may not recognise so we can add multiple fonts browser will take which ever it support or we can select generic family(it allows browser to select similar font)(generic familiy ex-serif,sans serif,cursive,fantasy,monospace)
to get font suggetions we click ctrl+space bar
we can take fonts from googlefonts website by impoting font or by link

font size- size of the text
font weight- it makes text bolder or lighter
font style- like italic, oblique

text align-it sets the text in wanted position like center, right or left
text indent-[indent means start (a line of text) or position (a block of text) further from the margin than the main part of the text]

line height- spacing b/w lines
letter spacing- space b/w letters(alphabates) 
word spacing-space b/w words
text transform- it will transform the text into lowercase or uppercase or capitalise(first letter of the word will be capital)
text decoration- it will do underline or striking kind of options for decoration to the text

CSS BOX MODEL

Margin
border
padding
content 

Padding Values order - top right bottom left
Remember last rule most of the times

border can be modified in different ways
we can also give negative margin to box

OUTLINE- 
OFFSET- we can move outline little offset(either in or out)

Display Properties
Block-always starts a new line and takes full width
Inline-Does not start and only take up as much as content space

Horizontal centering 
for centering the inline element we need to use text-align
for centering the block level elemet we need to use margin(margin:50px auto)

while listing we can use list-style-type for 
inline block does not respect top&bottom padding
box block element respect all padding

Visibility-it specifies weather the box need to be displied or not 

BACKGROUND
for this we need to create class and in CSS we have to assign url property to background, in url we need to select path of image
as of now if one background img fits and div is bigger then same image will repeat along side by default for this we need to select image as per size or
in CSS we need to set no-repeat for background- repeat
best option is select background as cover then it will fit according to size
background attachment-while scrolling photo won't move but text will move

clear

position static
position relative
position absolute

media screen-
syntax
@ media{
    tag{
        property: value;
    }
}

z index will only work when position is relative or absolute but not when static

pseudo element(::)- we can add content through CSS before and after content.
hover

Descendant
when we wanted to select child tag and do changes in the div
syntax
div > h1{

}
even if we do changes directly to the child as per last rule but if there is classs then class CSS will aplly b/c class is more specific or else we can select through class that will act as per last rule 
.class > h1 {

}   
